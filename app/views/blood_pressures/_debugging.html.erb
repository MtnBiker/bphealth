<h4>Related to last_record since used as the reference for daily graphs</h4>
<p>&#10062; &#(100<strong>62</strong>): same on both localhost and server. &#10060; &#(100<strong>60</strong>); : Not same</p>

<p>&#10062; last_record: <strong><%= last_record = BloodPressure.order('statdate asc').last.statdate %></strong>. This is correct and the same on localhost and server. <em>Bolded because used as reference for debugging.</em><p>
  <p class="fw-bold">Note that time zone is not shown with last record, but statdate does have timezone in PG</p>
<p>&#10060; last_record_zone = BloodPressure.order('statdate asc').last.statzone: <%= last_record_zone = BloodPressure.order('statdate asc').last.statzone %>. 8 localhost. 0 server. </p>
<!-- Prefer "America/Los_Angeles" other go pot luck. Other zones may have different daylight saving -->
<p>&#10060; last_record.utc_offset: <%= last_record.utc_offset %>.  0 on both and not doing what would be expected from the name of the method </p>
<!-- <p>CCCC<%#= last_record_zone_name = pg_timezone_names.where(name: "America/Los_Angeles") %></p> -->
<!-- <p>ActiveSupport::TimeZone.find_tzinfo(last_record.zone.name).identifier: <%#= ActiveSupport::TimeZone.find_tzinfo(last_record_zone).identifier %>. </p> -->
<p>&#10060; last_record.in_time_zone(last_record_zone):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  <%= last_record.in_time_zone(last_record_zone) %>.  No. Not using the zone which isn't surprising since `last_record_zone` above is wrong.</p>
<p>&#10062; last_record.in_time_zone("America/Los_Angeles"):  <%= last_record.in_time_zone("America/Los_Angeles") %>. Works, but is manually entered </p>
<p>&#10062; last_record-8.hour : <%= last_record-8.hour %>. This is just taking 8 hours off UTC. </p>

<p><%= timeZone =BloodPressure.order('statdate asc').last.statzone %></p>
<p><%= last_record_zone = BloodPressure.order('statdate asc').last.statzone  %></p>
<p><%= last_record_zone_in_seconds = last_record_zone*3600 %></p>
<p>last_record_midnight: <%=  last_record + last_record_zone_in_seconds - (last_record.min*60) - (last_record.sec) %></p>

<p>From referring page <%= @last_record %> doesn't work.</p>
  <%# timeZone = last_record.localtime.formatted_offset(false).slice!(0, 3).to_i %>
<% zoneLastRecord = BloodPressure.order('statdate asc').last.statzone %>
<p>&#10060; last_record+zoneLastRecord.hour-1.day: <%= last_record-zoneLastRecord.hour-1.day %>. A mess, 16 hours before on localhost</p>
<p>         last_record_1_day_ago = last_record-1.day <%= last_record-1.day %>. Was trying to use as starting and end point. Why? Makes no sense now. Needs to be a midnight thing</p>

<p>&#10060; zoneLastRecord for last_record: <%= zoneLastRecord = last_record.localtime.formatted_offset(false).slice!(0, 3).to_i %> -8 localhost, 0 on server. So math is wrong</p>
<p>zoneLastRecordNeg = -last_record.localtime.formatted_offset(false).slice!(0, 3).to_i <% zoneLastRecordNeg = -last_record.localtime.formatted_offset(false).slice!(0, 3).to_i %></p>
<p>&#10060; 3. last_record.localtime.formatted_offset: <%= last_record.localtime.formatted_offset(false) %>. Similar to a couple of lines above<br>
<p>&#10060; last_record: <%= last_record %>. Just repeating what's above<br>
<p>&#10060; <strong>last_record</strong>.zone: <%= last_record.zone %>. PST localhost. UTC on server</p>
<!-- <p>last_record.zone: <%#= zone(last_record) %><br> -->
<p>last_record: <%= last_record = BloodPressure.order('statdate asc').last.statdate %>. Getting value again<p>
<p>last_record: <%= last_record %>. Just repeating what's directly above<br>
<p>last_record.in_time_zone("America/Los_Angeles"):  <%= last_record.in_time_zone("America/Los_Angeles") %>. Zone as text from text column
<p>last_record.in_time_zone("PST"):  <%#= last_record.in_time_zone("PST") %>. Invalid Timezone: PST. Zone as abbreviation (per Postgres) doesn't work.
  <br>
  <br>
  
 <h4> Maybe get hours, minutes, seconds and do the math</h4>
  <p>last_record.hour: <%= last_record.hour %></p>
  <p>last_record.min: <%= last_record.min %></p>
  <p>last_record.sec: <%= last_record.sec %></p>
  <p>last_record.hour - zoneLastRecord: <%= last_record.hour-zoneLastRecord %></p>
  
<h5><strong>Midnight</strong>. Need in UTC. E.g. if data a 8:30 PST, need 08:00 for that day, i.e. 8:30 before</h5>
<p class="fw-bold">For reference.  last_record:  <%= last_record %></p>

<p>&#10062; Midnight (last_record.beginning_of_day+zoneLastRecord)   :  <%= last_record.beginning_of_day+zoneLastRecord %>. &#10062; UTC on both and &#10060; rounding error problems on localhost</p>


<br>
<h5>None of the following works for Midnight.  </h5>
<p>Midnight for a datetime in PST will be the local datetime minus the time. For example, midnight for 13:30 PST will be (00 PST or) 08:00 UST that day</p>
<p>&#10060; last_record_zone_seconds = last_record_zone*3600: <%= last_record_zone_seconds = last_record_zone*3600 %></p>
<p>&#10060; last_record + last_record_zone_seconds : <%= last_record + last_record_zone_seconds %>. Now need to subtract hMS</p>
<p><strong>&#10060; last_record_midnight = last_record + last_record_zone_seconds - (last_record.min*60) - (last_record.sec): </strong> : <%= last_record_midnight = last_record + last_record_zone_seconds - (last_record.min*60) - (last_record.sec) %>. Only going back to the top of the hour, not midnight√Ö </p>
<h4>previous midnight</h4>
<p>&#10060; last_record_midnight-1.day: <%= last_record_midnight-1.day %> </p>
<p>&#10060; Midnight (last_record.beginning_of_day)    :  <%= last_record.beginning_of_day %>. UTC 00:00 on both. Not correct</p>
<p>midnight: <% midnight = last_record.beginning_of_day - zoneLastRecord.hour %></p>
<p>5. Midnight UTC?: <%= midnight %><br>
  <h5>Midnight days before</p>
  <p>(last_record+zoneLastRecord.hour-1.day).beginning_of_day: <%= (last_record-zoneLastRecord.hour-1.day).beginning_of_day %>. Looks like UTC</p>
  <p> ((last_record+zoneLastRecord.hour-1.day).beginning_of_day)- zoneLastRecord.hour: <%= ((last_record-zoneLastRecord.hour-1.day).beginning_of_day) - zoneLastRecord.hour %></p>
  
<p>6. zoneLastRecord.hour: <%= zoneLastRecord.hour %> converts to seconds<br><%= zoneLastRecord.hour.class %></p>
<p>6.1 <%= last_record %> Time is local with time zone shown<br>
<p>7. last_record + zoneLastRecord.hour : <%= last_record + zoneLastRecord.hour %>. Differs on localhost and server<br>

<%# last_record = BloodPressure.order('statdate asc').last.statdate %><br>  <!-- 2022-01-06 16:14:48 UTC -->

<!-- Time.current: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<%#= Time.current %> (recommended?)<br>
Time.now: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<%#= Time.now %> <br>
Time.now.localtime: <%#= Time.now.localtime %><br>
Time.now(in: "-08:00"): <%#= Time.now(in: "-08:00") %>  # undefined local variable or method `zone' Supposed to be an option in Ruby 3.1, does Rails not know this.
Time.now(in: zone).zone: <%#= Time.now(in: zone).zone %>
Time.zone.now.inspect:    <%#= Time.zone.now.inspect %><br>
Time.now.in_time_zone("America/Los_Angeles"): <%#= Time.now.in_time_zone("America/Los_Angeles") %> -->

<!-- <hr> --><% last_record+zoneLastRecordNeg.hour %> <!-- 2022-01-06 16:14:48 -0800, So still essentially UTC -->
<!-- <hr><%#= last_record+(zoneLastRecordNeg.hour) %> 2022-01-06 16:14:48 -0800 -->
<%#= (last_record+zoneLastRecordNeg).hour %> <!-- 8 -->
<!-- I'm looking for midnight of the day, so for the abscissa, but finding stattime might be a different story. The data is selected correctly, but the abscissa labeling is wrong. The abscissa is in UTC and not local time -->
<%# last_record-8.hour %> <!-- :: 2022-01-06 00:14:48 -0800 -->
<%# last_record+8.hour %> <!-- :2022-01-06 16:14:48 -0800  -->
  
<h4>All relative to last record: (starting over)</h4>
<p>lookin for beginning of day in GMT in whatever zone the data is in. </p>
<p>last_record_0_day_ago = last_record.beginning_of_day+zoneLastRecordNeg.hour: 
  <%= last_record.beginning_of_day-zoneLastRecord.hour %>. Nope. beginning of days is OO UTC on server</p>


  
<h4>All relative to last record: And all are wrong either on localhost or server</h4>
<h5>on localhost still has minutes past beginning of day. On server except for first are 8:whatever mins ahead</h5>
last_record_0_day_ago = last_record.beginning_of_day+zoneLastRecordNeg.hour-1.day: <%= last_record.beginning_of_day-zoneLastRecord.hour-1.day %><br>
<h6>Should just be able to add a day rather than the following nonsense</h6>
last_record_1_day_ago = last_record-zoneLastRecord.hour-1.day:  <%= last_record-zoneLastRecord.hour-1.day %> UTC with zone indicated<br>
last_record_2_day_ago = last_record-zoneLastRecord.hour-2.day:  <%= last_record-zoneLastRecord.hour-2.day %> <br>
last_record_3_day_ago = last_record-zoneLastRecord.hour-3.day:  <%= last_record-zoneLastRecord.hour-3.day %> <br>
last_record_4_day_ago = last_record-zoneLastRecord.hour-4.day:  <%= last_record-zoneLastRecord.hour-4.day %> <br>
last_record_5_day_ago = last_record-zoneLastRecord.hour-5.day:  <%= last_record-zoneLastRecord.hour-5.day %> <br>
last_record_6_day_ago = last_record-zoneLastRecord.hour-6.day:  <%= last_record-zoneLastRecord.hour-6.day %> <br>
last_record_7_day_ago = last_record-zoneLastRecord.hour-7.day:  <%= last_record-zoneLastRecord.hour-7.day %> <br>


<!-- Could base these on above -->
<h5>localhost, wrong time, wrong day. server: right day, wrong time</h5>
<br>begin_0_day_ago = (last_record-zoneLastRecord.hour-0.day).beginning_of_day: <%= begin_0_day_ago = (last_record-zoneLastRecord.hour-0.day).beginning_of_day %>
<br>begin_1_day_ago = (last_record-zoneLastRecord.hour-1.day).beginning_of_day: <%= begin_1_day_ago = (last_record-zoneLastRecord.hour-1.day).beginning_of_day %>
<br>begin_2_day_ago = (last_record-zoneLastRecord.hour-2.day).beginning_of_day: <%= begin_2_day_ago = (last_record-zoneLastRecord.hour-2.day).beginning_of_day %>
<br>begin_3_day_ago = (last_record-zoneLastRecord.hour-3.day).beginning_of_day: <%= begin_3_day_ago = (last_record-zoneLastRecord.hour-3.day).beginning_of_day %>
<br>begin_4_day_ago = (last_record-zoneLastRecord.hour-4.day).beginning_of_day: <%= begin_4_day_ago = (last_record-zoneLastRecord.hour-4.day).beginning_of_day %>
<br>begin_5_day_ago = (last_record-zoneLastRecord.hour-5.day).beginning_of_day: <%= begin_5_day_ago = (last_record-zoneLastRecord.hour-5.day).beginning_of_day %>
<br>begin_6_day_ago = (last_record-zoneLastRecord.hour-6.day).beginning_of_day: <%= begin_6_day_ago = (last_record-zoneLastRecord.hour-6.day).beginning_of_day %>
<br><br>
<h5>wrong because based on above</h5>
 span00 = last_record.beginning_of_day..last_record : <% span00 = last_record.beginning_of_day..last_record %>               <br>
 span10 = begin_1_day_ago..last_record.beginning_of_day: <%= span10 = begin_1_day_ago..last_record.beginning_of_day %>           <br>
 span21 = begin_2_day_ago..begin_1_day_ago %>          : <%= span21 = begin_2_day_ago..begin_1_day_ago %>                        <br>
 span32 = begin_3_day_ago..begin_2_day_ago %>          : <%= span32 = begin_3_day_ago..begin_2_day_ago %>                        <br>
 span43 = begin_4_day_ago..begin_3_day_ago %>          : <%= span43 = begin_4_day_ago..begin_3_day_ago %>                        <br>
 span54 = begin_5_day_ago..begin_4_day_ago %>          : <%= span54 = begin_5_day_ago..begin_4_day_ago %>                        <br>
 span65 = begin_6_day_ago..begin_5_day_ago %>          : <%= span65 = begin_6_day_ago..begin_5_day_ago %>                        <br><h3>SQL in Rails</h3>
<% sql = "select * from pg_timezone_names" %>
<%# sql = "SELECT name FROM pg_timezone_names WHERE utc_offset = '-08:00:00';" %>
<% pg_timezone_names = ActiveRecord::Base.connection.execute(sql).to_a %> <!-- an object originally, but changed to an array -->
<p><%= "pg_timezone_names.class: #{pg_timezone_names.class}" %></p> <!-- >> PG::Result, now array -->
<p><%= "pg_timezone_names[1]:  #{pg_timezone_names[1]}" %></p> 
<!-- <p><%#= "pg_timezone_names:  #{pg_timezone_names}" %></p> --> <!-- A long list. An array of arrays? -->
<p><%= "pg_timezone_names[135]:  #{pg_timezone_names[135]}" %></p>
<p>pg_timezone_names.find { |h| h['utc_offset'] == 'PT0S' }['name'] : <%=  pg_timezone_names.find { |h| h['utc_offset'] == 'PT0S' }['name'] %></p>

<h5>To save resources‚Äîgetting different answer. 54 PT0S, so order matters</h5>
<% name_by_otc_offset= Hash[pg_timezone_names.map { |h| h.values_at('utc_offset', 'name') }] %>
<p>name_by_otc_offset['PT0S']: <%= name_by_otc_offset['PT0S'] %></p>

<h3>Some variables and time parsing is in partial debugging</h3>
<h4>Time and Date General</h4>
<p>Time.current: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<%= Time.current %> (recommended?)</p>
<p>Time.now: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<%= Time.now %>. <strong>Shows local time and zone as number</strong>. </p>
<p>Time.now.to_datetime: <%= Time.now.to_datetime %>. <strong>Shows local time and zone as number.</strong></p>
<p>Time.now.localtime: <%= Time.now.localtime %>. <strong>Shows local time and zone as number.</strong><br>
<p>Time.zone:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <%= Time.zone %>. <strong>UTC</strong> 0 in -8 or Heroku</p>
<p>Time.zone.now:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <%= Time.zone.now %>. <strong>Same</strong> in -8 or Heroku-UTC</p>
<p>Time.zone.now.to_datetime <%= Time.zone.now.to_datetime %>. <strong>UTC</strong> at both. See <%= link_to "DateTime current-Rails", "https://api.rubyonrails.org/classes/DateTime.html#method-c-current" %></p>
<p>Time.zone.now.inspect:    <%= Time.zone.now.inspect %>. <strong>UTC</strong> at both.</p>
<p>ActiveSupport::TimeZone.find_tzinfo(Time.zone.name).identifier: <%= ActiveSupport::TimeZone.find_tzinfo(Time.zone.name).identifier %>. <strong>UTC</strong></p>

<h5>Time in specific zone. And works as expected, irrespective of server</h5>
<p>Time.now.in_time_zone("America/Los_Angeles"): <%= Time.now.in_time_zone("America/Los_Angeles") %><br>
<p>Time.now(in: "-08:00"): <%= Time.now(in: "-08:00") %>.
<p>Time.now(in: "-00:00"): <%= Time.now(in: "-00:00") %>.  <!-- undefined local variable or method `zone' Supposed to be an option in Ruby 3.1, does Rails not know this. --></p>
<p>ActiveSupport::TimeZone.find_tzinfo(Time.zone.name).identifier: <%= ActiveSupport::TimeZone.find_tzinfo(Time.zone.name).identifier %>. Etc/UTC probably everywhere</p>
<p>Many of the above are UTC even on localhost in "America/Los_Angeles"</p>


